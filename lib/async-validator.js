// Generated by CoffeeScript 1.7.1
(function() {
  var ArrayValidator, BooleanValidator, NumberValidator, ObjectValidator, ScalarValidator, StringValidator, ValidationError, Validator, asyncValidator, previousAsyncValidator, regexValidaor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  asyncValidator = {};

  previousAsyncValidator = this.asyncValidator;

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = asyncValidator;
  } else {
    asyncValidator.noConflict = (function(_this) {
      return function() {
        _this.asyncValidator = previousAsyncValidator;
        return asyncValidator;
      };
    })(this);
    this.asyncValidator = asyncValidator;
  }

  ValidationError = (function(_super) {
    __extends(ValidationError, _super);

    function ValidationError(validateInfo) {
      this.validateInfo = validateInfo;
    }

    return ValidationError;

  })(Error);

  asyncValidator.Validator = Validator = (function() {
    function Validator(message) {
      this._msg = message;
      this._validators = [];
      this._context = null;
      this._required = true;
      this._nullable = false;
    }

    Validator.prototype.clone = function() {
      var newInstance;
      newInstance = new this.constructor();
      newInstance._msg = this._msg;
      newInstance._validators = this._validators.slice(0);
      newInstance._context = this._context;
      newInstance._required = this._required;
      newInstance._nullable = this._nullable;
      return newInstance;
    };

    Validator.prototype.msg = function(msg) {
      var newInstance;
      newInstance = this.clone();
      newInstance._msg = msg;
      return newInstance;
    };

    Validator.prototype.context = function(context) {
      var newInstance;
      newInstance = this.clone();
      newInstance._context = context;
      return newInstance;
    };

    Validator.register = function(name, validateFunc) {
      if (this.prototype[name] != null) {
        throw new Error("" + name + " is already registered");
      }
      return this.prototype[name] = function() {
        var newInstance, v_args;
        newInstance = this.clone();
        v_args = arguments;
        newInstance._validators.push((function(_this) {
          return function(str, next, context) {
            return validateFunc.apply(newInstance, v_args)(str, next, context);
          };
        })(this));
        return newInstance;
      };
    };

    Validator.prototype.validate = function(val, cb) {
      return this._validate(val, function() {
        var args, err;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        err = args[0];
        if (err != null) {
          args[0] = new ValidationError(err);
        }
        return typeof cb === "function" ? cb.apply(null, args) : void 0;
      });
    };

    Validator.prototype._validate = function(val, cb) {
      var idx, _next;
      idx = 0;
      if (this._required && typeof val === 'undefined') {
        return typeof cb === "function" ? cb("Required") : void 0;
      }
      if (!this._nullable && val === null) {
        return typeof cb === "function" ? cb("Not nullable") : void 0;
      }
      if (val == null) {
        return typeof cb === "function" ? cb(null, val) : void 0;
      }
      _next = (function(_this) {
        return function(err) {
          if (err) {
            if (_this._msg) {
              return typeof cb === "function" ? cb(_this._msg) : void 0;
            } else {
              return typeof cb === "function" ? cb(err) : void 0;
            }
          } else {
            if (idx === _this._validators.length) {
              return typeof cb === "function" ? cb(null, val) : void 0;
            } else {
              return _this._validators[idx++](val, _next, _this._context);
            }
          }
        };
      })(this);
      return _next();
    };

    Validator.prototype.required = function() {
      var newInstance;
      newInstance = this.clone();
      newInstance._required = true;
      return newInstance;
    };

    Validator.prototype.option = function() {
      var newInstance;
      newInstance = this.clone();
      newInstance._required = false;
      return newInstance;
    };

    Validator.prototype.nullable = function() {
      var newInstance;
      newInstance = this.clone();
      newInstance._nullable = true;
      return newInstance;
    };

    Validator.prototype.notNullable = function() {
      var newInstance;
      newInstance = this.clone();
      newInstance._nullable = false;
      return newInstance;
    };

    return Validator;

  })();

  asyncValidator.ScalarValidator = ScalarValidator = (function(_super) {
    __extends(ScalarValidator, _super);

    function ScalarValidator() {
      return ScalarValidator.__super__.constructor.apply(this, arguments);
    }

    return ScalarValidator;

  })(Validator);

  asyncValidator.StringValidator = StringValidator = (function(_super) {
    __extends(StringValidator, _super);

    function StringValidator() {
      return StringValidator.__super__.constructor.apply(this, arguments);
    }

    return StringValidator;

  })(ScalarValidator);

  asyncValidator.NumberValidator = NumberValidator = (function(_super) {
    __extends(NumberValidator, _super);

    function NumberValidator() {
      return NumberValidator.__super__.constructor.apply(this, arguments);
    }

    NumberValidator.prototype._validate = function(strOrNumber, cb) {
      var str;
      if (strOrNumber != null) {
        if (strOrNumber === '') {
          str = null;
        } else {
          str = strOrNumber + '';
        }
      } else {
        str = strOrNumber;
      }
      return NumberValidator.__super__._validate.call(this, str, function(err, str) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        } else {
          return typeof cb === "function" ? cb(null, parseFloat(str, 10)) : void 0;
        }
      });
    };

    return NumberValidator;

  })(ScalarValidator);

  asyncValidator.BooleanValidator = BooleanValidator = (function(_super) {
    __extends(BooleanValidator, _super);

    function BooleanValidator() {
      return BooleanValidator.__super__.constructor.apply(this, arguments);
    }

    BooleanValidator.prototype._validate = function(value, cb) {
      var boolValue;
      boolValue = null;
      if (value === 0 || value === false || value === '0' || value === 'false' || value === 'no' || value === 'off') {
        boolValue = false;
      } else if (value === 1 || value === true || value === '1' || value === 'true' || value === 'yes' || value === 'on') {
        boolValue = true;
      } else if (value != null) {
        return typeof cb === "function" ? cb('Invalid boolean value') : void 0;
      }
      return BooleanValidator.__super__._validate.call(this, value, function(err, str) {
        if (err != null) {
          return typeof cb === "function" ? cb(err) : void 0;
        } else {
          return typeof cb === "function" ? cb(null, boolValue) : void 0;
        }
      });
    };

    return BooleanValidator;

  })(Validator);

  asyncValidator.ArrayValidator = ArrayValidator = (function(_super) {
    __extends(ArrayValidator, _super);

    function ArrayValidator(innerValidator, msg) {
      this.msg = msg;
      ArrayValidator.__super__.constructor.call(this, this.msg);
      this._innerValidator = innerValidator;
      this._min = 0;
      this._max = null;
    }

    ArrayValidator.prototype.clone = function() {
      var newInstance;
      newInstance = ArrayValidator.__super__.clone.call(this);
      newInstance._innerValidator = this._innerValidator;
      newInstance._min = this._min;
      newInstance._max = this._max;
      return newInstance;
    };

    ArrayValidator.prototype.context = function(context) {
      var newInstance;
      newInstance = this.clone();
      newInstance._context = context;
      newInstance._innerValidator = newInstance._innerValidator.context(context);
      return newInstance;
    };

    ArrayValidator.prototype.len = function() {
      var args, newInstance;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      newInstance = this.clone();
      if (args.length === 1) {
        newInstance._max = args[0];
      }
      if (args.length === 2) {
        newInstance._min = args[0];
        newInstance._max = args[1];
      }
      return newInstance;
    };

    ArrayValidator.prototype._validate = function(array, cb) {
      var completes, count, errorOccured, errors, i, idx, isArray, len, _i, _next, _results;
      isArray = array && typeof array.indexOf === "function";
      len = (array ? parseInt(array.length) : null);
      errors = [];
      errorOccured = false;
      completes = [];
      count = 0;
      idx = 0;
      _next = (function(_this) {
        return function(err) {
          if (err) {
            return typeof cb === "function" ? cb(err) : void 0;
          } else {
            if (idx === _this._validators.length) {
              return typeof cb === "function" ? cb(null, completes) : void 0;
            } else {
              return _this._validators[idx++](array, _next, _this._context);
            }
          }
        };
      })(this);
      if (typeof array === 'undefined') {
        if (this._required) {
          return typeof cb === "function" ? cb("Required") : void 0;
        }
      }
      if (array === null) {
        if (!this._nullable) {
          return typeof cb === "function" ? cb("Not nullable") : void 0;
        }
      }
      if (array == null) {
        return typeof cb === "function" ? cb(null, array) : void 0;
      }
      if (isNaN(len) || (len == null)) {
        _next();
        return;
      }
      if (isArray) {
        if (this._min > len) {
          if (typeof cb === "function") {
            cb("Invalid length");
          }
          return;
        }
        if (this._max !== null && this._max < len) {
          if (typeof cb === "function") {
            cb("Invalid length");
          }
          return;
        }
        if (len === 0) {
          if (typeof cb === "function") {
            cb(null, completes);
          }
          return;
        }
      }
      if (!this._innerValidator) {
        return typeof cb === "function" ? cb(null, array) : void 0;
      } else {
        _results = [];
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          _results.push((function(_this) {
            return function(i) {
              return _this._innerValidator._validate(array[i], function(err, obj) {
                if (err) {
                  errorOccured = true;
                  errors[i] = err;
                } else {
                  errors[i] = null;
                  completes[i] = obj;
                }
                count += 1;
                if (count === len) {
                  if (errorOccured) {
                    return typeof cb === "function" ? cb(errors) : void 0;
                  } else {
                    return _next();
                  }
                }
              });
            };
          })(this)(i));
        }
        return _results;
      }
    };

    return ArrayValidator;

  })(Validator);

  asyncValidator.ObjectValidator = ObjectValidator = (function(_super) {
    __extends(ObjectValidator, _super);

    function ObjectValidator(innerValidators, msg) {
      var key;
      this.msg = msg;
      ObjectValidator.__super__.constructor.call(this, this.msg);
      this._innerValidators = [];
      this._partial = false;
      for (key in innerValidators) {
        this._innerValidators.push({
          name: key,
          validator: innerValidators[key]
        });
      }
    }

    ObjectValidator.prototype.clone = function() {
      var a, newInstance;
      newInstance = ObjectValidator.__super__.clone.call(this);
      a = ObjectValidator.__super__.clone.apply(this, arguments);
      newInstance._innerValidators = this._innerValidators.slice(0);
      newInstance._partial = this._partial;
      return newInstance;
    };

    ObjectValidator.prototype.context = function(context) {
      var contextValidators, innerValidator, newInstance, _i, _len, _ref;
      newInstance = this.clone();
      newInstance._context = context;
      contextValidators = [];
      _ref = newInstance._innerValidators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        innerValidator = _ref[_i];
        contextValidators.push({
          name: innerValidator.name,
          validator: innerValidator.validator.context(context)
        });
      }
      newInstance._innerValidators = contextValidators;
      return newInstance;
    };

    ObjectValidator.prototype.partial = function(partial) {
      var newInstance;
      newInstance = this.clone();
      newInstance._partial = partial;
      return newInstance;
    };

    ObjectValidator.prototype.addProperty = function(name, validator) {
      var newInstance;
      newInstance = this.clone();
      newInstance._innerValidators.push({
        name: name,
        validator: validator
      });
      return newInstance;
    };

    ObjectValidator.prototype._validate = function(obj, cb) {
      var checkComplete, completes, count, errorOccured, errors, idx, innerValidator, k, key, keys, pushKey, v, validatorMap, _i, _j, _len, _len1, _next, _ref, _results;
      completes = {};
      errors = {};
      errorOccured = false;
      idx = 0;
      _next = (function(_this) {
        return function(err) {
          if (err) {
            return typeof cb === "function" ? cb(err) : void 0;
          } else {
            if (idx === _this._validators.length) {
              return typeof cb === "function" ? cb(null, completes) : void 0;
            } else {
              return _this._validators[idx++](obj, _next, _this._context);
            }
          }
        };
      })(this);
      if (typeof obj === 'undefined') {
        if (this._required) {
          return typeof cb === "function" ? cb("Required") : void 0;
        }
      }
      if (obj === null) {
        if (!this._nullable) {
          return typeof cb === "function" ? cb("Not nullable") : void 0;
        }
      }
      if (obj == null) {
        return typeof cb === "function" ? cb(null, obj) : void 0;
      }
      keys = [];
      validatorMap = {};
      pushKey = function(k) {
        if (!~keys.indexOf(k)) {
          return keys.push(k);
        }
      };
      _ref = this._innerValidators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        innerValidator = _ref[_i];
        validatorMap[innerValidator.name] = innerValidator.validator;
        pushKey(innerValidator.name);
      }
      for (k in obj) {
        v = obj[k];
        pushKey(k);
      }
      count = 0;
      checkComplete = function() {
        count += 1;
        if (count === keys.length) {
          if (errorOccured) {
            return typeof cb === "function" ? cb(errors) : void 0;
          } else {
            return _next();
          }
        }
      };
      _results = [];
      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
        key = keys[_j];
        _results.push((function(_this) {
          return function(key) {
            var name, validator;
            validator = validatorMap[key];
            name = key;
            if (validator == null) {
              if (_this._partial) {
                completes[name] = obj[name];
              }
              return checkComplete();
            } else {
              return validator._validate(obj[name], function(err, validatedObj) {
                if (err) {
                  errorOccured = true;
                  errors[name] = err;
                } else {
                  if (obj.hasOwnProperty(name)) {
                    errors[name] = null;
                  }
                  if (Object.prototype.hasOwnProperty.call(obj, name)) {
                    completes[name] = validatedObj;
                  }
                }
                return checkComplete();
              });
            }
          };
        })(this)(key));
      }
      return _results;
    };

    return ObjectValidator;

  })(Validator);

  regexValidaor = function(regex, msg) {
    return function(str, next) {
      if (str == null) {
        return next();
      }
      if (str.match(regex)) {
        return next();
      } else {
        return next(msg);
      }
    };
  };

  ScalarValidator.register("isEmail", function() {
    return regexValidaor(/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/, "Invalid email");
  });

  ScalarValidator.register("isURL", function() {
    return regexValidaor(/^(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?:\w+:\w+@)?((?:(?:[-\w\d{1-3}]+\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\.uk|ac\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|((\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)(\.(\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)){3}))(?::[\d]{1,5})?(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?:#(?:[-\w~!$ |\/.,*:;=]|%[a-f\d]{2})*)?$/, "Invalid URL");
  });

  ScalarValidator.register("isInt", function() {
    return regexValidaor(/^(?:-?(?:0|[1-9][0-9]*))$/, "Invalid Integer");
  });

  ScalarValidator.register("isAlpha", function() {
    return regexValidaor(/^[a-zA-Z]+$/, "Invalid characters");
  });

  ScalarValidator.register("isAlphanumeric", function() {
    return regexValidaor(/^[a-zA-Z0-9]+$/, "Invalid characters");
  });

  ScalarValidator.register("isNumeric", function() {
    return regexValidaor(/^-?[0-9]+$/, "Invalid number");
  });

  ScalarValidator.register("isDecimal", function() {
    return regexValidaor(/^(?:-?(?:0|[1-9][0-9]*))?(?:\.[0-9]*)?$/, "Invalid decimal");
  });

  Validator.register("isFloat", function() {
    return regexValidaor(/^(?:-?(?:0|[1-9][0-9]*))?(?:\.[0-9]*)?$/, "Invalid float");
  });

  Validator.register("equals", function(val) {
    return function(str, next) {
      if (val !== str) {
        return next("Not equal");
      } else {
        return next();
      }
    };
  });

  ScalarValidator.register("regex", function(pattern, modifiers) {
    return function(str, next) {
      if (typeof pattern !== "function") {
        pattern = new RegExp(pattern, modifiers);
      }
      if (!str || str.match(pattern)) {
        return next();
      } else {
        return next("Invalid characters");
      }
    };
  });

  ScalarValidator.register("notRegex", function(pattern, modifiers) {
    return function(str, next) {
      if (typeof pattern !== "function") {
        pattern = new RegExp(pattern, modifiers);
      }
      if (str && str.match(pattern)) {
        return next("Invalid characters");
      } else {
        return next();
      }
    };
  });

  Validator.register("in", function(options) {
    return function(str, next) {
      if (options && typeof options.indexOf === "function") {
        if (!~options.indexOf(str)) {
          return next("Unexpected value");
        } else {
          return next();
        }
      } else {
        throw new Error("Invalid in() argument");
      }
    };
  });

  Validator.register("notIn", function(options) {
    return function(str, next) {
      if (options && typeof options.indexOf === "function") {
        if (options.indexOf(str)) {
          return next("Unexpected value");
        } else {
          return next();
        }
      } else {
        throw new Error("Invalid in() argument");
      }
    };
  });

  ScalarValidator.register("max", function(val) {
    return function(str, next) {
      var number;
      number = parseFloat(str);
      if (!isNaN(number) && number > val) {
        return next("Invalid Number");
      } else {
        return next();
      }
    };
  });

  ScalarValidator.register("min", function(val) {
    return function(str, next) {
      var number;
      number = parseFloat(str);
      if (!isNaN(number) && number < val) {
        return next("Invalid Number");
      } else {
        return next();
      }
    };
  });

  ScalarValidator.register("len", function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(str, next) {
      var max, min;
      if (args.length === 1) {
        max = args[0];
        min = null;
      }
      if (args.length === 2) {
        min = args[0];
        max = args[1];
      }
      if ((min != null) && ((str == null) || str.length < min)) {
        return next("String is too small");
      } else if (max && str.length > max) {
        return next("String is too large");
      } else {
        return next();
      }
    };
  });

  Validator.register("custom", function(validator) {
    return validator;
  });

  asyncValidator.string = function() {
    return new StringValidator();
  };

  asyncValidator.number = function() {
    return new NumberValidator();
  };

  asyncValidator.bool = function() {
    return new BooleanValidator();
  };

  asyncValidator.array = function(innerValidator) {
    return new ArrayValidator(innerValidator);
  };

  asyncValidator.obj = function(innerValidators) {
    return new ObjectValidator(innerValidators);
  };

}).call(this);
